{"version":3,"sources":["Connector.js","LBLE.js","Card.js","CommandCenter.js","App.js","serviceWorker.js","index.js"],"names":["extensionId","Connector","serviceUuid","characteristicUuid","onBleMessage","Object","classCallCheck","this","runtime","Runtime","registerPeripheralExtension","options","filters","services","optionalServices","ble","BLE","_onConnect","bind","disconnect","addListener","onDiscover","console","log","e","p","peripheralId","connectPeripheral","startNotifications","payload","_connected","write","BaseUtil","uint8ArrayToBase64","LBLE","number","toString","toHex","padStart","obj","ret","keys","forEach","key","IO","reverseMap","objectFlip","IOEvent","Port","PortFeedback","LedColor","UUID","SERVICE","CHARACTERISTIC","SystemType","WEDO2","DUPLO","SYSTEM","SYSTEM2","DeviceNumber","WEDO","DUPLO_TRAIN","MOVE_HUB","SYSTEM2PORT","SYSTEM2HANDSET","DeviceCapabilities","CENTRAL","PERIPHERAL","LPF2","ACT_AS_REMOTE","MOTOR_WEDO","MOTOR_SYSTEM","BUTTON","LIGHT","VOLTAGE","CURRENT","PIEZO","LED","TILT_EXTERNAL","MOTION_SENSOR","COLOR","MOTOR_EXTERNAL","MOTOR_INTERNAL","TILT","IN_PROGRESS","COMPLETED","DISCARDED","IDLE","BUSY_OR_FULL","A","B","C","D","E","F","Color","NONE","RED","BLUE","GREEN","YELLOW","WHITE","BLACK","ColorIndex","OFF","PINK","VIOLET","LIGHT_BLUE","LIGHT_GREEN","ORANGE","MessageType","HUB_PROPERTIES","HUB_ACTIONS","HUB_ALERTS","HUB_ATTACHED_IO","ERROR","HW_NETWORK_COMMANDS","FW_UPDATE_GO_INTO_BOOTMODE","FW_UPDATE_LOCK_MEMORY","FW_UPDATE_LOCK_STATUS_REQUEST","FW_LOCK_STATUS","PORT_INFO_REQUEST","PORT_MODE_INFO_REQUEST","PORT_INPUT_FORMAT_SETUP_SINGLE","PORT_INPUT_FORMAT_SETUP_COMBINED","PORT_INFORMATION","PORT_MODEINFORMATION","PORT_VALUE","PORT_VALUE_COMBINED","PORT_INPUT_FORMAT","PORT_INPUT_FORMAT_COMBINED","VIRTUAL_PORT_SETUP","OUTPUT","PORT_FEEDBACK","HubProperty","ADVERTISEMENT_NAME","FW_VERSION","HW_VERSION","RSSI","BATTERY_VOLTAGE","BATTERY_TYPE","MANUFACTURER_NAME","RADIO_FW_VERSION","LEGO_WP_VERSION","SYSTEM_TYPE_ID","HW_NETWORK_ID","PRIMARY_MAC","SECONDARY_MAC","HW_NETWORK_FAMILY","HubPropertyOperation","SET","ENABLE_UPDATES","DISABLE_UPDATES","RESET","REQUEST_UPDATE","UPDATE","HubActionType","SWITCH_OFF","DISCONNECT","VCC_PORT_ON","VCC_PORT_OFF","ACTIVATE_BUSY","RESET_BUSY","SWITCH_OFF_FAST","HUB_WILL_SWITCH_OFF","HUB_WILL_DISCONNECT","HUB_WILL_GO_INTO_BOOTMODE","HubAlert","LOW_VOLTAGE","HIGH_CURRENT","LOW_SIGNAL","OVER_POWER","HubAlertOperation","REQUEST_UPDATES","HubAlertPayload","OK","ALERT","ErrorCodes","ACK","NACK","BUFFER_OVERFLOW","TIMEOUT","COMMAND_NOT_RECOGNIZED","INVALID_USE","OVERCURRENT","INTERNAL_ERROR","HardwareNetworkCommandType","HardwareNetworkFamily","HardwareNetworkSubfamily","ModeInformationType","OutputSubCommand","START_POWER","START_POWER_PAIR","SET_ACC_TIME","SET_DEC_TIME","START_SPEED","START_SPEED_PAIR","START_SPEED_FOR_TIME","START_SPEED_FOR_TIME_PAIR","START_SPEED_FOR_DEGREES","START_SPEED_FOR_DEGREES_PAIR","GO_TO_ABS_POSITION","GO_TO_ABS_POSITION_PAIR","PRESET_ENCODER","WRITE_DIRECT_MODE_DATA","OutputExecution","BUFFER_IF_NECESSARY","EXECUTE_IMMEDIATELY","NO_ACTION","COMMAND_FEEDBACK","MotorEndState","FLOAT","HOLD","BRAKE","MotorProfile","DO_NOT_USE","ACCELERATION","DECELERATION","ATTACHED","DETACHED","ATTACHED_VIRTUAL","numberToInt32Array","buffer","ArrayBuffer","dataview","DataView","setInt32","getInt8","sconstructor","Card","phrase","props","port","event","io","concat","feedback","hexStrings","Array","prototype","map","call","n","toHexString","react_default","a","createElement","uuidv1","className","moment","timestamp","format","React","Component","HubID","CommandCenter","_this","possibleConstructorReturn","getPrototypeOf","state","ledIndex","ledRgb","r","g","b","background","handleChangeLedIndex","assertThisInitialized","handleChangeLedRgb","setState","target","value","c","rgb","hex","changeLedMode","cmd","unshift","length","ioSend","mode","toConsumableArray","ledOptions","k","i","pop","portOptions","onChange","onClick","changeLedByIndex","lib","disableAlpha","presetColors","color","onChangeComplete","changeLedByRgb","handleChangePort","portMotor","es","min","max","defaultValue","sendMotorCommand","App","messages","onMessage","send","base64ToUint8Array","prevState","Date","now","fromDevice","sortedCards","m","src_Card_0","assign","sort","getTime","reverse","src_CommandCenter_0","onCommand","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13277508.chunk.js","sourcesContent":["import BLE from 'scratch-vm/src/io/ble';\nimport Runtime from 'scratch-vm/src/engine/runtime';\nimport BaseUtil from 'scratch-vm/src/util/base64-util';\nconst extensionId = 'myExtension';\n\nclass Connector {\n\n    constructor(serviceUuid, characteristicUuid, onBleMessage) {\n        this.serviceUuid = serviceUuid;\n        this.characteristicUuid = characteristicUuid;\n        this.onBleMessage = onBleMessage;\n        this.runtime = new Runtime();\n        this.runtime.registerPeripheralExtension(extensionId,this)\n        const options = {\n            filters: [{\n                services: [this.serviceUuid]\n            }],\n            optionalServices: []\n        };\n        this.ble = new BLE(this.runtime,extensionId, options, this._onConnect.bind(this), this.disconnect.bind(this));\n        this.runtime.addListener(\"PERIPHERAL_LIST_UPDATE\",this.onDiscover.bind(this));\n        console.log(\"Set up LEGO Connector\")\n    }\n\n    onDiscover(e) {\n        for (var p in e) {\n            p = e[p]\n            if(this.ble && p.peripheralId) {\n                this.ble.connectPeripheral(p.peripheralId);\n            }\n            break;\n        }\n    }\n\n    _onConnect() {\n        if(this.ble) {\n            this.ble.startNotifications(\n                this.serviceUuid,\n                this.characteristicUuid,\n                this.onBleMessage\n            );\n        }\n    }\n    disconnect() {\n        console.log(\"disconnect\")\n    }\n\n    send(payload) {\n        return this.ble._connected ? this.ble.write(\n            this.serviceUuid,\n            this.characteristicUuid,\n            BaseUtil.uint8ArrayToBase64(payload),'base64', true) : false;\n        \n    }\n}\n\nexport default Connector;","export default class LBLE {\n\n    static toHex(number) {\n        return (number).toString(16)\n    }\n\n    static toHexString(number) {\n        return this.toHex(number).padStart(2,'0')\n    }\n\n    static UUID = {\n        SERVICE: '00001623-1212-efde-1623-785feabcd123',\n        CHARACTERISTIC: '00001624-1212-efde-1623-785feabcd123' \n    }\n\n    static SystemType = {\n        WEDO2: 0x00,\n        DUPLO: 0x01,\n        SYSTEM: 0x02,\n        SYSTEM2: 0x03\n    }\n\n    static DeviceNumber = {\n        WEDO: 0x00,\n        DUPLO_TRAIN: 0x00,\n        MOVE_HUB: 0x00,\n        SYSTEM2PORT: 0x01,\n        SYSTEM2HANDSET: 0x02\n    }\n\n    static DeviceCapabilities = {\n        CENTRAL: 0x01,\n        PERIPHERAL: 0x02,\n        LPF2: 0x04,\n        ACT_AS_REMOTE: 0x08\n    }\n\n    /**\n     * Enum for ids for various LEGO Inputs and Outputs\n     * @readonly\n     * @enum {number}\n     */\n\n    static IO = {\n        MOTOR_WEDO: 0x01,\n        MOTOR_SYSTEM: 0x02,\n        BUTTON: 0x05,\n        LIGHT: 0x08,\n        VOLTAGE: 0x14,\n        CURRENT: 0x15,\n        PIEZO: 0x16,\n        LED: 0x17,\n        TILT_EXTERNAL: 0x22,\n        MOTION_SENSOR: 0x23,\n        COLOR: 0x25,\n        MOTOR_EXTERNAL: 0x26,\n        MOTOR_INTERNAL: 0x27,\n        TILT: 0x28,\n        reverseMap: {}\n    };\n\n    /**\n     * Enum for ids for various output command feedback types on the LEGO.\n     * @readonly\n     * @enum {number}\n     */\n    static PortFeedback = {\n        IN_PROGRESS: 0x01,\n        COMPLETED: 0x02,\n        DISCARDED: 0x04,\n        IDLE: 0x08,\n        BUSY_OR_FULL: 0x10\n    };\n\n    /**\n     * Enum for physical LEGO Ports\n     * @readonly\n     * @enum {number}\n     */\n    static Port = {\n        A: 0,\n        B: 1,\n        C: 2,\n        D: 3,\n        E: 4,\n        F: 5\n    };\n\n    /**\n     * Ids for each color sensor value used by the extension.\n     * @readonly\n     * @enum {string}\n     */\n    static Color = {\n        NONE: 'none',\n        RED: 'red',\n        BLUE: 'blue',\n        GREEN: 'green',\n        YELLOW: 'yellow',\n        WHITE: 'white',\n        BLACK: 'black'\n    };\n\n    /**\n     * Enum for indices for each color sensed by the LEGO vision sensor.\n     * @readonly\n     * @enum {number}\n     */\n    static ColorIndex = {\n        [this.Color.NONE]: 255,\n        [this.Color.RED]: 9,\n        [this.Color.BLUE]: 3,\n        [this.Color.GREEN]: 5,\n        [this.Color.YELLOW]: 7,\n        [this.Color.WHITE]: 10,\n        [this.Color.BLACK]: 0\n    };\n\n    static LedColor = {\n        OFF: 0,\n        PINK: 1,\n        VIOLET: 2,\n        BLUE: 3,\n        LIGHT_BLUE: 4,\n        LIGHT_GREEN: 5,\n        GREEN:6,\n        YELLOW:7,\n        ORANGE:8,\n        RED:9,\n        WHITE:10\n    };\n\n    /**\n     * Enum for Message Types\n     * @readonly\n     * @enum {number}\n     */\n    static MessageType = {\n        HUB_PROPERTIES: 0x01,\n        HUB_ACTIONS: 0x02,\n        HUB_ALERTS: 0x03,\n        HUB_ATTACHED_IO: 0x04,\n        ERROR: 0x05,\n        HW_NETWORK_COMMANDS: 0x08,\n        FW_UPDATE_GO_INTO_BOOTMODE: 0x10,\n        FW_UPDATE_LOCK_MEMORY: 0x11,\n        FW_UPDATE_LOCK_STATUS_REQUEST: 0x12,\n        FW_LOCK_STATUS : 0x13,\n        PORT_INFO_REQUEST : 0x21,\n        PORT_MODE_INFO_REQUEST: 0x22,\n        PORT_INPUT_FORMAT_SETUP_SINGLE: 0x41,\n        PORT_INPUT_FORMAT_SETUP_COMBINED: 0x42,\n        PORT_INFORMATION: 0x43,\n        PORT_MODEINFORMATION: 0x44,\n        PORT_VALUE: 0x45,\n        PORT_VALUE_COMBINED: 0x46,\n        PORT_INPUT_FORMAT: 0x47,\n        PORT_INPUT_FORMAT_COMBINED: 0x48,\n        VIRTUAL_PORT_SETUP : 0x61,\n        OUTPUT: 0x81,\n        PORT_FEEDBACK: 0x82\n    };\n\n    static HubProperty = {\n        ADVERTISEMENT_NAME : 0x01,\n        BUTTON: 0x02,\n        FW_VERSION: 0x03,\n        HW_VERSION: 0x04,\n        RSSI: 0x05,\n        BATTERY_VOLTAGE: 0x06,\n        BATTERY_TYPE: 0x07,\n        MANUFACTURER_NAME: 0x08,\n        RADIO_FW_VERSION: 0x09,\n        LEGO_WP_VERSION: 0x0A,\n        SYSTEM_TYPE_ID: 0x0B,\n        HW_NETWORK_ID: 0x0C,\n        PRIMARY_MAC: 0x0D,\n        SECONDARY_MAC: 0x0E,\n        HW_NETWORK_FAMILY: 0x0F\n    }\n\n    static HubPropertyOperation = {\n        SET: 0x01,\n        ENABLE_UPDATES: 0x02,\n        DISABLE_UPDATES: 0x03,\n        RESET: 0x04,\n        REQUEST_UPDATE: 0x05,\n        UPDATE: 0x06\n    }\n\n    static HubActionType = {\n        SWITCH_OFF: 0x01,\n        DISCONNECT: 0x02,\n        VCC_PORT_ON: 0x03,\n        VCC_PORT_OFF: 0x04,\n        ACTIVATE_BUSY: 0x05,\n        RESET_BUSY: 0x06,\n        SWITCH_OFF_FAST : 0x2F,\n        HUB_WILL_SWITCH_OFF: 0x30,\n        HUB_WILL_DISCONNECT: 0x31,\n        HUB_WILL_GO_INTO_BOOTMODE: 0x32\n    }\n\n    static HubAlert = {\n        LOW_VOLTAGE : 0x01,\n        HIGH_CURRENT: 0x02,\n        LOW_SIGNAL: 0x03,\n        OVER_POWER: 0x04\n    }\n\n    static HubAlertOperation = {\n        ENABLE_UPDATES: 0x01,\n        DISABLE_UPDATES: 0x02,\n        REQUEST_UPDATES: 0x03,\n        UPDATE: 0x04\n    }\n\n    static HubAlertPayload = {\n        OK: 0x00,\n        ALERT: 0xFF\n    }\n\n    static ErrorCodes = {\n        ACK: 0x01,\n        NACK: 0x02,\n        BUFFER_OVERFLOW: 0x03,\n        TIMEOUT: 0x04,\n        COMMAND_NOT_RECOGNIZED : 0x05,\n        INVALID_USE: 0x06,\n        OVERCURRENT: 0x07,\n        INTERNAL_ERROR: 0x08\n    }\n\n    static HardwareNetworkCommandType = {}\n\n    static HardwareNetworkFamily = {}\n\n    static HardwareNetworkSubfamily = {}\n\n    static ModeInformationType = {\n    }\n\n    /**\n     * TBD: function for converting version numbers to something friendly https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#ver-no\n     */\n\n    /**\n     * Enum for Motor Subcommands (for 0x81)\n     * @readonly\n     * @enum {number}\n     */\n    static OutputSubCommand = {\n        START_POWER: 0x01,\n        START_POWER_PAIR: 0x02,\n        SET_ACC_TIME: 0x05,\n        SET_DEC_TIME: 0x06,\n        START_SPEED: 0x07,\n        START_SPEED_PAIR: 0x08,\n        START_SPEED_FOR_TIME: 0x09,\n        START_SPEED_FOR_TIME_PAIR: 0x0A,\n        START_SPEED_FOR_DEGREES: 0x0B,\n        START_SPEED_FOR_DEGREES_PAIR: 0x0C,\n        GO_TO_ABS_POSITION: 0x0D,\n        GO_TO_ABS_POSITION_PAIR: 0x0E,\n        PRESET_ENCODER: 0x14,\n        WRITE_DIRECT_MODE_DATA: 0x51\n    };\n\n    /**\n     * Enum for Startup/Completion information for an output command.\n     * Startup and completion bytes must be OR'ed to be combined to a single byte.\n     * @readonly\n     * @enum {number}\n     */\n    static OutputExecution = {\n        // Startup information\n        BUFFER_IF_NECESSARY: 0x00,\n        EXECUTE_IMMEDIATELY: 0x10,\n        // Completion information\n        NO_ACTION: 0x00,\n        COMMAND_FEEDBACK: 0x01\n    };\n\n    /**\n     * Enum for LEGO Motor end states\n     * @readonly\n     * @enum {number}\n     */\n    static MotorEndState = {\n        FLOAT: 0,\n        HOLD: 126,\n        BRAKE: 127\n    };\n\n    /**\n     * Enum for LEGO Motor acceleration/deceleration profiles\n     * @readyonly\n     * @enum {number}\n     */\n    static MotorProfile = {\n        DO_NOT_USE: 0x00,\n        ACCELERATION: 0x01,\n        DECELERATION: 0x02\n    };\n\n    /**\n     * Enum for when LEGO IO's are attached/detached\n     * @readonly\n     * @enum {number}\n     */\n    static IOEvent = {\n        ATTACHED: 0x01,\n        DETACHED: 0x00,\n        ATTACHED_VIRTUAL: 0x02\n    }\n    \n    static numberToInt32Array = function (number) {\n        const buffer = new ArrayBuffer(4);\n        const dataview = new DataView(buffer);\n        dataview.setInt32(0, number);\n        return [\n            dataview.getInt8(3),\n            dataview.getInt8(2),\n            dataview.getInt8(1),\n            dataview.getInt8(0)\n        ];\n    };\n\n    static objectFlip(obj) {\n        const ret = {};\n        Object.keys(obj).forEach((key) => {\n          ret[obj[key]] = key;\n        });\n        return ret;\n      }\n\n    \n    static sconstructor() {\n        this.IO.reverseMap = this.objectFlip(this.IO)\n        this.IOEvent.reverseMap = this.objectFlip(this.IOEvent)\n        this.Port.reverseMap = this.objectFlip(this.Port)\n        this.PortFeedback.reverseMap = this.objectFlip(this.PortFeedback)\n        this.LedColor.reverseMap = this.objectFlip(this.LedColor)\n    }\n}\nLBLE.sconstructor()","import React from 'react';\nimport './Card.css';\nimport LBLE from './LBLE';\nimport moment from 'moment';\nimport uuidv1 from 'uuid/v1';\n\nclass Card extends React.Component {\n\n  render() {\n    var phrase = '?'\n    switch(this.props.payload[2]) {\n        case LBLE.MessageType.HUB_PROPERTIES:\n        case LBLE.MessageType.HUB_ALERTS:\n            phrase = 'Hub'\n            break;\n        case LBLE.MessageType.HUB_ATTACHED_IO: {\n            let port = this.props.payload[3],\n                  event = this.props.payload[4],\n                  io = this.props.payload[5];\n            phrase = `${LBLE.IO.reverseMap[io]} ${LBLE.IOEvent.reverseMap[event]} on port ${LBLE.Port.reverseMap[port] ? LBLE.Port.reverseMap[port]:port}`;\n            break;\n        }\n        case LBLE.MessageType.PORT_INFORMATION:\n            phrase = 'Port'\n            break;\n        case LBLE.MessageType.PORT_FEEDBACK:\n            let port = this.props.payload[3],\n            feedback = this.props.payload[4];\n            phrase = `Command ${feedback} on port ${LBLE.Port.reverseMap[port] ? LBLE.Port.reverseMap[port]:port}`\n            break;\n        case LBLE.MessageType.ERROR:\n            phrase = 'Error'\n            break;\n        default:\n          console.log(this.props.payload)\n    }\n\n    const hexStrings = Array.prototype.map.call(this.props.payload, function(n) {\n        return '0x' + LBLE.toHexString(n) + ' '\n    })\n    return (\n      <div key={uuidv1()} className=\"Card\">\n        {/*<div className=\"Card-header\">\n            <div className=\"Card-title\">{phrase}</div>\n        </div>*/}\n        <div className=\"Card-phrase\">\n            {phrase}\n        </div>\n        <div className=\"Card-footer\">\n            <div className=\"Card-code\">{hexStrings}</div>\n            <div className=\"Card-timestamp\">{moment(this.props.timestamp).format('HH:mm:ss.SSS')}</div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from 'react';\nimport './CommandCenter.css';\nimport LBLE from './LBLE';\nimport { SketchPicker } from 'react-color';\nimport Slider from 'rc-slider'; \nimport 'rc-slider/assets/index.css';\n\nconst HubID = 0x00;\n\nclass CommandCenter extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ledIndex: 0,\n            ledRgb: {r:0,g:0,b:0},\n            background:'#fff'\n        }\n\n        this.handleChangeLedIndex = this.handleChangeLedIndex.bind(this);\n        this.handleChangeLedRgb = this.handleChangeLedRgb.bind(this)\n    }\n\n    handleChangeLedIndex(e) {\n        this.setState({ledIndex: e.target.value})\n    }\n\n    handleChangeLedRgb(c) {\n        this.setState({\n            ledRgb: c.rgb, \n            background: c.hex\n        });\n    }\n\n    changeLedByIndex(payload) {\n        this.changeLedMode(0)\n        const cmd = [HubID, \n            LBLE.MessageType.OUTPUT, \n            50, \n            LBLE.OutputExecution.EXECUTE_IMMEDIATELY ^ LBLE.OutputExecution.COMMAND_FEEDBACK,\n            LBLE.OutputSubCommand.WRITE_DIRECT_MODE_DATA,\n            0,\n            this.state.ledIndex\n        ];\n        cmd.unshift(cmd.length);\n        this.props.ioSend(cmd);\n    }\n\n    changeLedByRgb(payload) {\n        this.changeLedMode(1)\n        const cmd = [HubID, \n            LBLE.MessageType.OUTPUT, \n            50, \n            LBLE.OutputExecution.EXECUTE_IMMEDIATELY ^ LBLE.OutputExecution.COMMAND_FEEDBACK,\n            LBLE.OutputSubCommand.WRITE_DIRECT_MODE_DATA,\n            1,\n            this.state.ledRgb.r,\n            this.state.ledRgb.g,\n            this.state.ledRgb.b,\n        ];\n        cmd.unshift(cmd.length);\n        this.props.ioSend(cmd);\n    }\n\n    changeLedMode(mode) {\n        const cmd = [HubID, \n            LBLE.MessageType.PORT_INPUT_FORMAT_SETUP_SINGLE, \n            50,\n            mode,\n            ...LBLE.numberToInt32Array(1),\n            1\n        ];\n        cmd.unshift(cmd.length);\n        this.props.ioSend(cmd);\n    }\n\n    sendMotorCommand() {\n\n    }\n    \n\n  render() {\n    const ledOptions = Object.keys(LBLE.LedColor).map((k,i) => {\n        return <option value={i} key={i}>({i}) {k}</option>;\n    });\n    ledOptions.pop(); // Remove reverseMap\n\n    const portOptions = Object.keys(LBLE.Port).map((k,i) => {\n        return <option value={i} key={i}>({i}) {k}</option>;\n    });\n    portOptions.pop(); // Remove reverseMap\n\n    return (\n        <div className=\"CommandCenterContainer\">\n            <div className=\"CommandCenter-card\">\n                <div className=\"CommandCenter-header\">LED</div>\n                <select onChange={this.handleChangeLedIndex} value={this.state.ledIndex}>\n                    {ledOptions}\n                </select>\n                <button onClick={this.changeLedByIndex.bind(this)}>set LED by index</button>\n                <br /><br />\n                <SketchPicker disableAlpha={true} presetColors={[]} color={this.state.background} onChangeComplete={this.handleChangeLedRgb} />\n                <button onClick={this.changeLedByRgb.bind(this)}>set LED by RGB</button>\n            </div>\n            <div className=\"CommandCenter-card\">\n                <div className=\"CommandCenter-header\">Motor (WIP)</div>\n                Port: <select onChange={this.handleChangePort} value={this.state.portMotor}>\n                    {portOptions}\n                </select><br />\n                Command type: \n                <br />\n                Speed: <div><Slider min={0} max={100} defaultValue={50}/></div> <br />\n                MaxPower: <div><Slider min={0} max={100} defaultValue={100}/></div> <br />\n                MaxPower: <br />\n\n                <button onClick={this.sendMotorCommand.bind(this)}>Send motor command</button>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default CommandCenter;\n","import React from 'react';\nimport './App.css';\nimport Connector from './Connector';\nimport BaseUtil from 'scratch-vm/src/util/base64-util';\nimport LBLE from './LBLE';\nimport Card from './Card';\nimport CommandCenter from './CommandCenter';\nimport uuidv1 from 'uuid/v1';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      messages: []\n    }\n    this.onMessage = this.onMessage.bind(this);\n    this.send = this.send.bind(this);\n    // This will set up a Scratch VM runtime with BLE, start scanning for the given service and automatically connect if any is found. Once connected, it will subscribe to the given characteristic and use to send commands to.\n    this.c = new Connector(LBLE.UUID.SERVICE, LBLE.UUID.CHARACTERISTIC, this.onMessage);\n  }\n\n  send(payload) {\n    this.c.send(payload);\n  }\n\n  onMessage(e) {\n    var b = BaseUtil.base64ToUint8Array(e)\n    this.setState((prevState) => ({\n        messages: [...prevState.messages, {\"timestamp\":Date.now(),\"payload\":b,fromDevice:true}]\n    }));\n  }\n\n  onCommand(p) {\n    this.c.send(p);\n    this.setState((prevState) => ({\n      messages: [...prevState.messages, {\"timestamp\":Date.now(),\"payload\":p,fromDevice:false}]\n  }));\n  }\n\n  render() {\n    const cards = this.state.messages.map(m => {\n            return <Card key={uuidv1()} {...m}></Card>;\n    });\n    const sortedCards = cards.sort((a,b) => {\n      return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    }).reverse();\n\n    return (\n      <div className=\"App\">\n        <div className=\"Cards\">\n          {sortedCards}\n          {/*<Card timestamp={Date.now()} payload={[8, 0, 129, 50, 17, 81, 0, 2]}></Card>*/}\n        </div>\n        <CommandCenter ioSend={this.onCommand.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}